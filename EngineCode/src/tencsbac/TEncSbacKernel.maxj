package tencsbac;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class TEncSbacKernel extends Kernel {

	DFEType int32 = dfeInt(32);
	DFEType uint32 = dfeUInt(32);

	static final int TOTAL_BITS = 64;

	static final int TP_ENC_BIN_____BIT = 0;
	static final int TP_ENC_BINS_EP_BIT = 1;
	static final int TP_ENC_BIN_TRM_BIT = 2;
	static final int TP_ENC_BIN_AP1_BIT = 3;//finish
	static final int TP_ENC_BIN_SIG_BIT = 4;//bottom finish, write(1,1),
	static final int TP_ENC_BIN_AP0_BIT = 5;//alignZero


	static final int ENCODE_TYPE_WIDTH = 3;//alignZero
	static final int ENCODE_VAL__WIDTH = 21;//alignZero
	static final int ENCODE_CTX__WIDTH = 8;//alignZero

	protected TEncSbacKernel(KernelParameters parameters) {
		super(parameters);

		//scalar inputs
		DFEVar compId = io.scalarInput("compId", int32);
		DFEVar width = io.scalarInput("width", int32);
		DFEVar scanFirstPos = io.scalarInput("scanFirstPos", int32);
		DFEVar sigRight = io.scalarInput("sigRight", int32);
		DFEVar sigLower = io.scalarInput("sigLower", int32);

		Memory<DFEVar> loopVaraiblesTable = mem.alloc(dfeRawBits(TOTAL_BITS), 2);
		loopVaraiblesTable.mapToCPU("loopVaraiblesTable");

		Memory<DFEVar> scan_32 = mem.alloc(dfeRawBits(TOTAL_BITS), 1024);
		scan_32.mapToCPU("scan_32");

		Memory<DFEVar> scan_16 = mem.alloc(dfeRawBits(TOTAL_BITS), 256);
		scan_16.mapToCPU("scan_16");

		Memory<DFEVar> notFirstGroupNeighbourhoodContextOffset = mem.alloc(dfeRawBits(TOTAL_BITS), 2);
		notFirstGroupNeighbourhoodContextOffset.mapToCPU("notFirstGroupNeighbourhoodContextOffset");

		Memory<DFEVar> coded_sub_block_flag_buffer = mem.alloc(dfeRawBits(TOTAL_BITS), 2);
		coded_sub_block_flag_buffer.mapToCPU("coded_sub_block_flag_buffer");

		Memory<DFEVar> sig_coeff_flag_buffer = mem.alloc(dfeRawBits(TOTAL_BITS), 16);
		sig_coeff_flag_buffer.mapToCPU("sig_coeff_flag_buffer");

		Memory<DFEVar> coeff_abs_level_greater1_flag_buffer = mem.alloc(dfeRawBits(TOTAL_BITS), 8);
		coeff_abs_level_greater1_flag_buffer.mapToCPU("coeff_abs_level_greater1_flag_buffer");

		Memory<DFEVar> coeff_abs_level_greater2_flag_buffer = mem.alloc(dfeRawBits(TOTAL_BITS), 2);
		coeff_abs_level_greater2_flag_buffer.mapToCPU("coeff_abs_level_greater2_flag_buffer");

		Memory<DFEVar> coeff_sign_flag_buffer = mem.alloc(dfeRawBits(TOTAL_BITS), 2);
		coeff_sign_flag_buffer.mapToCPU("coeff_sign_flag_buffer");

		Memory<DFEVar> coeff_abs_level_remaining_buffer = mem.alloc(dfeRawBits(TOTAL_BITS), 16);
		coeff_abs_level_remaining_buffer.mapToCPU("coeff_abs_level_remaining_buffer");

		OffsetExpr loopLength = stream.makeOffsetAutoLoop("loopLength");
		DFEVar loopLengthVal = loopLength.getDFEVar(this, dfeUInt(8));
		CounterChain chain = control.count.makeCounterChain();
		DFEVar inputCounter = chain.addCounter(16, 1);
		DFEVar loopCount = chain.addCounter(loopLengthVal+1, 1);

		DFEVar isRead = loopCount.eq(0);
		DFEVar isWrite = loopCount.eq(loopLengthVal);

		DFEVar input = io.input("input", dfeInt(32),isRead);

		DFEVar afterLoopVariables = dfeRawBits(TOTAL_BITS).newInstance(this);
		DFEVar afterLoopVariablesWithOffset = stream.offset(afterLoopVariables, -loopLength);
		DFEVar beforeLoopVariables = loopVaraiblesTable.port(constant.var(dfeUInt(1),0), afterLoopVariablesWithOffset, isWrite, Mem.RamWriteMode.READ_FIRST);

		//Get the loop variables
		DFEVar numNonZero  = beforeLoopVariables.slice(0, 5).cast(dfeUInt(5));
		DFEVar c1 = beforeLoopVariables.slice(5,2).cast(dfeUInt(2));
		DFEVar hasOutput_coeff_abs_level_greater2_flag = beforeLoopVariables.slice(7, 1).cast(dfeUInt(1));
		DFEVar coeffSigns = beforeLoopVariables.slice(8, 16).cast(dfeUInt(16));
		DFEVar iFirstCoeff2 = beforeLoopVariables.slice(24, 1).cast(dfeUInt(1));
		DFEVar uiGoRiceParam = beforeLoopVariables.slice(25, 3).cast(dfeUInt(3));

		DFEVar numNonZero_1 = (input.eq(0) ? numNonZero : numNonZero + 1);

		//flag format:  EncodeType: 3bits --> EncodeValue: 21 bits --> ctxIdx/len: 8 bits

		//编码coded_sub_block_flag
		DFEVar isLastInput = inputCounter.eq(15);
		DFEVar base_coeff_group_ctx_idx = compId.eq(0) ? constant.var(dfeUInt(ENCODE_CTX__WIDTH), 42) : constant.var(dfeUInt(ENCODE_CTX__WIDTH), 44);
		DFEVar ui_ctx_sig = (sigRight + sigLower).neq(0).cast(dfeUInt(ENCODE_CTX__WIDTH));
		DFEVar coded_sub_block_flag_ctx = base_coeff_group_ctx_idx + ui_ctx_sig;
		DFEVar coded_sub_block_flag_encode_type = constant.var(dfeUInt(ENCODE_TYPE_WIDTH), TP_ENC_BIN_____BIT);
		DFEVar coded_sub_block_flag_val = (numNonZero_1 > 0).cast(dfeUInt(ENCODE_VAL__WIDTH));
		DFEVar coded_sub_block_flag = constant.var(int32, 0).cat(coded_sub_block_flag_encode_type.cat(coded_sub_block_flag_val).cat(coded_sub_block_flag_ctx));
		coded_sub_block_flag_buffer.port(constant.var(dfeUInt(1), 0), coded_sub_block_flag, isLastInput & isRead, Mem.RamWriteMode.WRITE_FIRST);

		//编码sig_coeff_flag
		DFEVar ui_sig = input.neq(0);
		DFEVar base_ctx_idx = constant.var(dfeUInt(ENCODE_CTX__WIDTH), 46) + ((compId.eq(0))? constant.var(dfeUInt(ENCODE_CTX__WIDTH), 0): 28);
		DFEVar pattern_sig_ctx = sigRight + sigLower.shiftLeft(1);
		DFEVar scan_current_pos = scanFirstPos.cast(dfeUInt(10)) - inputCounter.cast(dfeUInt(10));//当前的对角扫描的位置
		DFEVar rasterPosition_pre = (width.eq(32)) ? scan_32.read(scan_current_pos.cast(dfeUInt(10))): scan_16.read(scan_current_pos.cast(dfeUInt(8))) ;//当前的顺序扫描的位置
		DFEVar rasterPosition = rasterPosition_pre.slice(0, 32).cast(dfeUInt(32));
		DFEVar uiLog2BlockWidth = (width.eq(32)) ? constant.var(dfeUInt(3), 5) : 4;
		DFEVar pos_y = rasterPosition.shiftRight(uiLog2BlockWidth);
		DFEVar pos_x = rasterPosition - (pos_y.shiftLeft(uiLog2BlockWidth));
		DFEVar is_special_case_for_dc = (pos_y + pos_x) === 0;
		DFEVar is_case_0 = pattern_sig_ctx === 0;
		DFEVar is_case_1 = pattern_sig_ctx === 1;
		DFEVar is_case_2 = pattern_sig_ctx === 2;
		DFEVar is_case_3 = pattern_sig_ctx === 3;
		DFEVar posXinSubset = (is_case_0 | is_case_2) ? pos_x & ((1 << 2)  - 1) : 0;
		DFEVar posYinSubset = (is_case_0 | is_case_1) ? pos_y & ((1 << 2)  - 1) : 0;
		DFEVar posTotalInSubset = posXinSubset + posYinSubset;
		int groupHeight  = 1 << 2;
		int groupWidth   = 1 << 2;
		DFEVar cnt_0 = is_case_0 ? ((posTotalInSubset >= 3) ? 0 : ((posTotalInSubset >= 1) ? constant.var(dfeUInt(ENCODE_CTX__WIDTH), 1) : 2)) : 0;
		DFEVar cnt_1 = is_case_1 ? ((posYinSubset >= (groupHeight >> 1)) ? 0 : ((posYinSubset >= (groupHeight >> 2)) ? constant.var(dfeUInt(ENCODE_CTX__WIDTH),1) : 2)): cnt_0;
		DFEVar cnt_2 = is_case_2 ? ((posXinSubset >= (groupWidth >> 1)) ? 0 : ((posXinSubset >= (groupWidth >> 2)) ? constant.var(dfeUInt(ENCODE_CTX__WIDTH),1)  : 2)) : cnt_1;
		DFEVar cnt = (is_case_0 | is_case_1 | is_case_2) ? cnt_2 : is_case_3 ? constant.var(dfeUInt(ENCODE_CTX__WIDTH), 2) : 0;
		DFEVar notFirstGroup = ((pos_x >> 2) + (pos_y >> 2)) > 0;
		DFEVar offset = (notFirstGroup ? notFirstGroupNeighbourhoodContextOffset.read(compId.cast(dfeUInt(1))).slice(0, ENCODE_CTX__WIDTH).cast(dfeUInt(ENCODE_CTX__WIDTH)) : 0) + cnt;
		DFEVar firstSignificanceMapContext = (width.eq(32)) ? constant.var(dfeUInt(ENCODE_CTX__WIDTH), 21) : 12;
		DFEVar uiCtxSig1 = is_special_case_for_dc ? 0 : (firstSignificanceMapContext + offset);
		DFEVar sig_coeff_flag_encode_type = constant.var(dfeUInt(ENCODE_TYPE_WIDTH), TP_ENC_BIN_____BIT);
		DFEVar sig_coeff_flag_val = ui_sig.cast(dfeUInt(ENCODE_VAL__WIDTH));
		DFEVar sig_coeff_flag_ctx = base_ctx_idx + uiCtxSig1;
		DFEVar sig_coeff_flag = constant.var(int32, 0).cat(sig_coeff_flag_encode_type.cat(sig_coeff_flag_val).cat(sig_coeff_flag_ctx));
		sig_coeff_flag_buffer.port(inputCounter, sig_coeff_flag, isRead, Mem.RamWriteMode.WRITE_FIRST);

		//编码coeff_abs_level_greater1_flag
		DFEVar absCoeff = (input < 0 ? -input : input).cast(uint32);
		DFEVar isOutputCoeff_abs_level_greater1_flag = (absCoeff.neq(0) & numNonZero < 8);
		DFEVar uiSymbol = absCoeff > 1 ? constant.var(dfeUInt(ENCODE_VAL__WIDTH), 1) : 0;
		DFEVar notFirstSubsetOffset = (compId.eq(0) & (scanFirstPos > 15)) ? constant.var(dfeUInt(ENCODE_CTX__WIDTH), 2) : 0;
		DFEVar uiCtxSet = (compId === 0 ? constant.var(dfeUInt(ENCODE_CTX__WIDTH), 0):4) + notFirstSubsetOffset;
		DFEVar baseCtxMod = 150 + (4 * uiCtxSet);
		DFEVar coeff_abs_level_greater1_flag_encode_type = constant.var(dfeUInt(ENCODE_TYPE_WIDTH), TP_ENC_BIN_____BIT);
		DFEVar coeff_abs_level_greater1_flag_val = uiSymbol;
		DFEVar coeff_abs_level_greater1_flag_ctx = baseCtxMod + c1.cast(dfeUInt(ENCODE_CTX__WIDTH));
		DFEVar coeff_abs_level_greater1_flag = constant.var(int32, 0).cat(coeff_abs_level_greater1_flag_encode_type.cat(coeff_abs_level_greater1_flag_val).cat(coeff_abs_level_greater1_flag_ctx));
		coeff_abs_level_greater1_flag_buffer.port(inputCounter.cast(dfeUInt(3)), coeff_abs_level_greater1_flag, isOutputCoeff_abs_level_greater1_flag & isRead, Mem.RamWriteMode.WRITE_FIRST);
		DFEVar isBranch1 = (uiSymbol === 1) & isOutputCoeff_abs_level_greater1_flag;
		DFEVar isBranch4 = isOutputCoeff_abs_level_greater1_flag & (c1 < 3) & (c1 > 0);
		DFEVar c1_1 = (isBranch1 ? 0 : (isBranch4 ? c1+1: c1));
		DFEVar firstC2Flag = isBranch1;

		//编码coeff_abs_level_greater2_flag,是否存在这个编码取决于coeff_abs_level_greater1_flag是否存在1
		DFEVar symbol = absCoeff > 2 ? constant.var(dfeUInt(ENCODE_VAL__WIDTH), 1) : 0;
		DFEVar isBranch5 = (firstC2Flag & hasOutput_coeff_abs_level_greater2_flag === 0);
		DFEVar hasOutput_coeff_abs_level_greater2_flag_1 = (hasOutput_coeff_abs_level_greater2_flag === 1) ? 1 : isBranch5 ? constant.var(dfeUInt(1),1) : 0;
		DFEVar baseCtxMod_1 = 174 + (1 * uiCtxSet);
		DFEVar coeff_abs_level_greater2_flag_encode_type = constant.var(dfeUInt(ENCODE_TYPE_WIDTH), TP_ENC_BIN_____BIT);
		DFEVar coeff_abs_level_greater2_flag_val = symbol;
		DFEVar coeff_abs_level_greater2_flag_ctx = baseCtxMod_1;
		DFEVar coeff_abs_level_greater2_flag = constant.var(int32, 0).cat(coeff_abs_level_greater2_flag_encode_type.cat(coeff_abs_level_greater2_flag_val).cat(coeff_abs_level_greater2_flag_ctx));
		coeff_abs_level_greater2_flag_buffer.port(constant.var(dfeUInt(1), 0), coeff_abs_level_greater2_flag, isLastInput & isRead, Mem.RamWriteMode.WRITE_FIRST);

		//编码coeff_sign_flag
		DFEVar inputNotZero = ui_sig === 1;
		DFEVar coeffSigns_1 = inputNotZero ? (2 * coeffSigns + ((input < 0) ? constant.var(dfeUInt(16), 1) : 0)) : coeffSigns;
		DFEVar coeff_sign_flag_encode_type = constant.var(dfeUInt(ENCODE_TYPE_WIDTH), TP_ENC_BINS_EP_BIT);
		DFEVar coeff_sign_flag_val = coeffSigns_1.cast(dfeUInt(ENCODE_VAL__WIDTH));
		DFEVar coeff_sign_flag_ctx = numNonZero_1.cast(dfeUInt(ENCODE_CTX__WIDTH));
		DFEVar coeff_sign_flag = constant.var(int32, 0).cat(coeff_sign_flag_encode_type.cat(coeff_sign_flag_val).cat(coeff_sign_flag_ctx));
		coeff_sign_flag_buffer.port(constant.var(dfeUInt(1), 0), coeff_sign_flag, isLastInput & isRead, Mem.RamWriteMode.WRITE_FIRST);

		//编码coeff_abs_level_remaining
		DFEVar baseLevel  = (numNonZero < 8)? 2+iFirstCoeff2.cast(uint32) : 1;
		DFEVar isBranch7 = inputNotZero & absCoeff >= baseLevel;
		DFEVar isBranch8 = inputNotZero & absCoeff >= 2;
		DFEVar isBranch9 = isBranch7 & absCoeff > (constant.var(uint32, 3) << uiGoRiceParam);
		DFEVar escapeCodeValue = absCoeff.cast(uint32) - baseLevel;
		DFEVar isBranch10 = isBranch7 & (escapeCodeValue < (constant.var(uint32, 3) << uiGoRiceParam));
		DFEVar isBranch11 = isBranch7 & ~(escapeCodeValue < (constant.var(uint32, 3) << uiGoRiceParam));
		DFEVar length = (isBranch10 ? escapeCodeValue >> uiGoRiceParam : isBranch11 ? uiGoRiceParam.cast(uint32) : 0).cast(dfeUInt(6));
		int size = 7;
		DFEVar[] escapeCodeValueArray = new DFEVar[size];
		DFEVar[] lengthArray = new DFEVar[size];
		escapeCodeValueArray[0] = escapeCodeValue - (constant.var(uint32, 3) << uiGoRiceParam);
		lengthArray[0] = length;
		for(int j=0;j<size-1;j++){
			DFEVar isWhileTrue = escapeCodeValueArray[j] >= (constant.var(uint32,1)<<lengthArray[j]);
			lengthArray[j+1] = isWhileTrue ? lengthArray[j] + 1 : lengthArray[j];
			escapeCodeValueArray[j+1] = isWhileTrue ? escapeCodeValueArray[j] - (constant.var(uint32,1)<<(lengthArray[j])) : escapeCodeValueArray[j];
		}
		//debug.simPrintf(isRead, "escapeCodeValueArray[0]=%d, uiGoRiceParam=%d, escapeCodeValueArray[size-1]=%d, absCoeff=%d, baseLevel=%d, length[0]=%d, inputCounter=%d, iFirstCoeff2=%d, nonNumZero=%d\n", escapeCodeValueArray[0], uiGoRiceParam, escapeCodeValueArray[size-1], absCoeff, baseLevel, length[0], inputCounter, iFirstCoeff2, numNonZero);
		DFEVar coeff_abs_level_remaining_part1_val_pre = isBranch10 ? (constant.var(uint32,1)<<(length+1))-2 : isBranch11 ? (constant.var(uint32,1)<<(3+lengthArray[size-1]+1-uiGoRiceParam.cast(dfeUInt(6))))-2 : 0;
		//debug.simPrintf(isRead, "isBranch10=%d, escapeCodeValue=%d, uiGoRiceParam=%d, absCoeff=%d, baseLevel=%d, length=%d, inputCounter=%d, iFirstCoeff2=%d, nonNumZero=%d\n", isBranch10, escapeCodeValue, uiGoRiceParam, absCoeff, baseLevel, length, inputCounter, iFirstCoeff2, numNonZero);
		DFEVar coeff_abs_level_remaining_part1_len = isBranch10 ? length+1 : isBranch11 ? 3+lengthArray[size-1]+1-uiGoRiceParam.cast(dfeUInt(6)) : 0;
		DFEVar coeff_abs_level_remaining_part2_val_pre = isBranch10 ? (escapeCodeValue & ((constant.var(uint32,1)<<uiGoRiceParam) - 1)) : isBranch11 ? escapeCodeValueArray[size-1] : 0;
		DFEVar coeff_abs_level_remaining_part2_len = isBranch10 ? uiGoRiceParam.cast(dfeUInt(6)) : isBranch11 ? lengthArray[size-1] : 0;
		DFEVar isOutput_coeff_abs_level_remaining = isBranch10 | isBranch11;
		DFEVar coeff_abs_level_remaining_part1_encode_type = constant.var(dfeUInt(ENCODE_TYPE_WIDTH), TP_ENC_BINS_EP_BIT);
		DFEVar coeff_abs_level_remaining_part1_val = coeff_abs_level_remaining_part1_val_pre.cast(dfeUInt(ENCODE_VAL__WIDTH));
		DFEVar coeff_abs_level_remaining_part1_ctx = coeff_abs_level_remaining_part1_len.cast(dfeUInt(ENCODE_CTX__WIDTH));
		DFEVar coeff_abs_level_remaining_part1 = coeff_abs_level_remaining_part1_encode_type.cat(coeff_abs_level_remaining_part1_val).cat(coeff_abs_level_remaining_part1_ctx);
		DFEVar coeff_abs_level_remaining_part2_encode_type = constant.var(dfeUInt(ENCODE_TYPE_WIDTH), TP_ENC_BINS_EP_BIT);
		DFEVar coeff_abs_level_remaining_part2_val = coeff_abs_level_remaining_part2_val_pre.cast(dfeUInt(ENCODE_VAL__WIDTH));
		DFEVar coeff_abs_level_remaining_part2_ctx = coeff_abs_level_remaining_part2_len.cast(dfeUInt(ENCODE_CTX__WIDTH));
		DFEVar coeff_abs_level_remaining_part2 = coeff_abs_level_remaining_part2_encode_type.cat(coeff_abs_level_remaining_part2_val).cat(coeff_abs_level_remaining_part2_ctx);
		DFEVar coeff_abs_level_remaining = coeff_abs_level_remaining_part1.cat(coeff_abs_level_remaining_part2);
		coeff_abs_level_remaining_buffer.port(inputCounter, coeff_abs_level_remaining, isOutput_coeff_abs_level_remaining & isRead, Mem.RamWriteMode.WRITE_FIRST);
		debug.simPrintf(isRead, "inputCounter=%d, part1=%d, part2=%d, coeff_abs_level_remaining=%d\n", inputCounter, coeff_abs_level_remaining_part1, coeff_abs_level_remaining_part2, coeff_abs_level_remaining);
		DFEVar iFirstCoeff2_1 = isBranch8 ? 0 : iFirstCoeff2;
		DFEVar uiGoRiceParam_1 = isBranch9 ? (((uiGoRiceParam + 1) < 4) ? (uiGoRiceParam + 1): 4) : uiGoRiceParam;

		io.output("output",input.cast(dfeInt(32)) + numNonZero.cast(dfeInt(32)), dfeInt(32), isRead);


		afterLoopVariables <== constant.var(dfeUInt(36), 0).cat(uiGoRiceParam_1).cat(iFirstCoeff2_1).cat(coeffSigns_1).cat(hasOutput_coeff_abs_level_greater2_flag_1).cat(c1_1).cat(numNonZero_1);


	}

}
